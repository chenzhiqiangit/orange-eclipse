<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
	
	<!-- 配置JMS连接工厂 -->
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://10.1.23.58:61616" />
		<!-- 是否异步发送,异步是用监听器，监听 -->
    	<property name="useAsyncSend" value="true" />
    	<property name="redeliveryPolicy">
	        <bean id="redeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
	            <!--是否在每次尝试重新发送失败后,增长这个等待时间-->
	            <property name="useExponentialBackOff" value="true"></property>
	            <!--重发次数,默认为6次-->
	            <property name="maximumRedeliveries" value="3"></property>
	            <!--重发时间间隔,默认为1秒-->
	            <property name="initialRedeliveryDelay" value="1000"></property>
	            <!--第一次失败后重新发送之前等待500毫秒,第二次失败再等待500 * 2毫秒,这里的2就是value-->
	            <property name="backOffMultiplier" value="2"></property>
	            <!--最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），假设首次重连间隔为10ms，倍数为2，那么第 二次重连时间间隔为 20ms，第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔。-->
	            <property name="maximumRedeliveryDelay" value="1000"></property>
	        </bean>
	    </property>
	</bean>
	
	 <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory  
	 	它将在所有的createConnection()调用中返回同一个相同的共享连接对象， 并且忽略Connection.close()和stop()的调用
	 	用于缓存session和producter，一般用于比较频繁的消息创建（如公共服务jms）
	  -->  
	<bean id="cachingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
	  <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->  
		<property name="targetConnectionFactory" ref="connectionFactory"></property>
		
	 	<!-- Session缓存数量 -->
	  	<property name="sessionCacheSize" value="10"></property>
	</bean>
	
	<!-- 连接池方式 -->
	<!-- 
	<bean id="poolConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>
  	-->
  	
	 <!-- Queue队列：仅有一个订阅者会收到消息，消息一旦被处理就不会存在队列中 -->
	<bean id="notifyQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<!-- 设置消息队列的名字 -->
		<constructor-arg>
			<value>q.notify</value>
		</constructor-arg>
	</bean>
	
	 <!--这个是主题目的地，一对多的-->  
	<bean id="notifyTopic" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg>
			<value>t.notify</value>
		</constructor-arg>
	</bean>
	
	<!-- 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。 -->
	<bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
	 	<property name="pubSubDomain" value="false" />
		<property name="connectionFactory" ref="cachingConnectionFactory" />
		<property name="defaultDestination" ref="notifyQueue" />
	</bean>
	
	<!-- 配置JMS模板（Topic），Spring提供的JMS工具类，它发送、接收消息。 -->
	<bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
	 	<property name="pubSubDomain" value="true" />
		<property name="connectionFactory" ref="cachingConnectionFactory" />
		<property name="defaultDestination" ref="notifyTopic"/>
	</bean>
	

	
	<bean id="locationSynchronizeService" class="com.orang.weixin.taskManager.common.service.task.LocationSynchronizeService">
		<property name="jmsTemplate" ref="jmsTopicTemplate"></property>
	</bean>
	
	<!-- 监听消息 -->
	<bean id = "jmsQMessageListener" class="com.orang.weixin.taskManager.common.service.QueueMessageListener">  
		<property name="schedulerMap">
			<map>
				<entry key="2" value-ref="locationSynchronizeService"></entry>
			</map>
		</property>
    </bean>  
	
	<bean id = "listenerConsumer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="cachingConnectionFactory"/>  
        <property name="destination" ref="notifyQueue" />  
        <property name="messageListener" ref="jmsQMessageListener" />  
    </bean>  
    
</beans>  